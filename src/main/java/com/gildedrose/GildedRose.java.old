package main.java.com.gildedrose;

import java.util.Arrays;
import java.util.stream.Stream;


public class GildedRose {
    private Item[] items;
    public static final int REDUCING_FACTOR = 2; //added by kirti
    public static final int MAX_QUALITY_FACTOR = 50; //added by kirti
    public static final int SULFURAS_MAX_QUALITY_FACTOR = 80; //added by kirti --it never changes
    
    public GildedRose(Item[] items) {
        this.setItems(items);
    }
/* Commented by Kirti
    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    } */
    
    public void updateQualityAll() {    
    	 Stream<Item> stream = Arrays.stream(getItems()); 
    	 stream.forEach(x ->  { updateQuality(x); } );
    	 }
  
	/**
	 * @param item
	 */
	public  void updateQuality(Item item) {	
		try{
		reduceSellIndayByOne(item);		
		if(!hasPassedSellByDate(item) && !isBrie(item) && !isSulfuras(item) && !hasBackstagepasses(item) ||  isConjuredItem(item))
		reduceQualityByTwice(item);		
		if(isBrie(item))
		increaseQuality(item);
		if(hasBackstagepasses(item))
		increaseQuality(item);		
		System.out.println("Item updated " + item.name + "  SellIn: "+ item.sellIn + "  Quality: " + item.quality );
		}
		catch(ItemException e)
		{
			System.out.println("Received ItemException " + e.getMessage());
		}
	}

	/**
 * @param item
	 * @throws ItemException 
 */
private  void reduceSellIndayByOne(Item item) throws ItemException {
	if(!isSulfuras(item))
	{item.sellIn = item.sellIn -1;
	//System.out.println("item.sellIn  " + item.sellIn  );
	}
	else {	System.out.println("Error - Sulfurus item can not be sold.");	
	 throw new ItemException("Error - Sulfurus item can not be sold");
	}
	
}
	/**
	 * @param item
	 * increase the quality of aged items
	 */
	private  void increaseQuality(Item item) {
		
		int qualityval = 0;
		if(item.sellIn<6 )
		qualityval = item.quality+3;
		else {
		if(item.sellIn<=10)
		qualityval = item.quality+2; 
		}		
		if(qualityval >  MAX_QUALITY_FACTOR)
		{
		System.out.println("Error - Max Quality value reached.");
		item.quality = 50;
		}
		else
		{ 
			if(qualityval==0) item.quality +=1;		
		    else item.quality = qualityval;
		}
		//System.out.println("increaseQuality  " + qualityval + "  " + item.quality  );
	}


	/**
	 * @param item
	 * @return
	 */
	private  boolean isConjuredItem(Item item) {
		if(item.name.contains("Conjured"))
		return true;
		else return false;
	}

	/**
	 *  Reduce the quality value of an item
	 */
	private  void reduceQualityByTwice(Item item) {
		int qualityval = item.quality - 2*REDUCING_FACTOR;
		if( qualityval < 0 ) { //if negative value -- set it to 0 --no value
			item.quality= 0; //item has no value
			System.out.println("ERROR - Item has negative value " + qualityval );	
		}
		else item.quality = qualityval;		
		//System.out.println("Quality changhed to " + qualityval );
	}

	/**
	 * @param item
	 * @return
	 */
	private  boolean hasPassedSellByDate(Item item) {
		//reduce the sellinDate by 1
		if (item.sellIn>0)
		return false;
		else return true;
	}

	/**
	 * @param item
	 * @return
	 */
	private  boolean isSulfuras(Item item) {
		if(item.name.contains("Sulfuras"))
		return true;
		else return false;
	}

	/**
	 * @param item
	 * @return
	 */
	private  boolean isBrie(Item item) {
		if(item.name.contains("Aged Brie"))
		return true;
		else return false;
	}

	/**
	 * @return
	 */
	private  boolean hasBackstagepasses(Item item) {
		if(item.name.contains("Backstage passes"))
		return true;
		else return false;
	}

	/**
	 * @return the items
	 */
	public Item[] getItems() {
		return items;
	}

	/**
	 * @param items the items to set
	 */
	public void setItems(Item[] items) {
		this.items = items;
	}
}